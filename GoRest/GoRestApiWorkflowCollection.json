{
	"info": {
		"_postman_id": "31143907-c0a6-4d8e-a10b-7b98418bdbd5",
		"name": "GoRestApiWorkflow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1655479",
		"_collection_link": "https://blue-capsule-323578.postman.co/workspace/ApiJan2025~37f8486d-044b-485a-95e2-cf07bbb7f533/collection/1655479-31143907-c0a6-4d8e-a10b-7b98418bdbd5?action=share&source=collection_link&creator=1655479"
	},
	"item": [
		{
			"name": "1-GetAllUsers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//check if the response is 200\r",
							"\r",
							"pm.test(\"Status Code is 200\",function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{tokenID}}"
					}
				],
				"url": {
					"raw": "{{baseURL}}/public/v2/users",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "2-CreateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response=pm.response.json();\r",
							"const user_Id=response.id;\r",
							"console.log(\"user_Id:\"+user_Id);\r",
							"\r",
							"//setting the local variable \"userId\"\r",
							"pm.variables.set(\"userId\",user_Id);\r",
							"\r",
							"//The preference of the local variable will be the highest and the\r",
							"//This will be picked the first as per LDECG\r",
							"//the local variable userId will be created on the fly and the value will be set\r",
							"\r",
							"pm.test(\"status code is 201\",function(){\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"Check username is Seema\",function(){\r",
							"    var jsonData=pm.response.json();\r",
							"    pm.expect(jsonData.name).to.equal(\"Seema\");\r",
							"})\r",
							"\r",
							"pm.test(\"Check presence of Content-Type in header\",function(){\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{tokenID}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Seema\", //\"{{$randomUserName}}\", // inbuilt js function $randomUserName in Postman for a random username\r\n    \"gender\": \"male\",\r\n    \"email\": \"apiautomation_{{$randomEmail}}\",\r\n    // duplicate emails gives a 422 error, only unique emails required, inbuilt js function $randomEmail in Postman for a random email and \r\n    // can be executed any no of times no manual intervention required \r\n    // so that easy for me to know that those are my records created using Api Automation using Postman\r\n    // by writing a query we get the no of records created in the DB by email beginning with apiautomation_ \r\n    // during Api Automation using Postman\r\n    \r\n    \"status\": \"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/public/v2/users",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "3-GetAUserById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code is 200\",function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Check username is Seema\",function(){\r",
							"    var jsonData=pm.response.json();\r",
							"    pm.expect(jsonData.name).to.equal(\"Seema\");\r",
							"})\r",
							"\r",
							"pm.test(\"Check userId is correct\",function(){\r",
							"  const newUserId=pm.variables.get(\"userId\");\r",
							"  console.log(\"New User Id:\"+newUserId);\r",
							"  var jsonData=pm.response.json();\r",
							"  pm.expect(jsonData.id).to.equal(newUserId);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenID}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/public/v2/users/{{userId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "4-UpdateUserById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code is 200\",function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Check the response time is less than 500 ms\",function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"})\r",
							"\r",
							"pm.test(\"Check status is inactive\",function(){\r",
							"    var jsonData=pm.response.json();\r",
							"    pm.expect(jsonData.status).to.equal(\"inactive\");\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenID}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\":\"inactive\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/public/v2/users/{{userId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "5-DeleteUserById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code is 204\",function(){\r",
							"    pm.response.to.have.status(204);\r",
							"})\r",
							"\r",
							"pm.test(\"Check the response time is less than 500 ms\",function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenID}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/public/v2/users/{{userId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "6-GetUserById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code is 404\",function(){\r",
							"    pm.response.to.have.status(404);\r",
							"})\r",
							"\r",
							"pm.test(\"Check the response time is less than 500 ms\",function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{tokenID}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/public/v2/users/{{userId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	]
}